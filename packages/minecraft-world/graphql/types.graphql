scalar Int64

scalar DateTime

# Represents a position (or movement) in 3D
type Vector3D {
  x: Float!
  y: Float!
  z: Float!
}

# Represents a position (or movement) in 2D in terms of X/Z coordinates
type Vector2D {
  x: Float!
  z: Float!
}

# Represents a 2D view angle into a 3D world
type ViewAngle {
  # In degrees; Due south is 0 (0 <= yaw < 360)
  yaw: Float!
  # In degrees; horizontal is 0, postive downward (-90 <= pitch <= 90)
  pitch: Float!
}

# The difficulty level of the game
enum GameDifficulty {
  Peaceful
  Easy
  Normal
  Hard
}

# The different game modes available in Minecraft
enum GameMode {
  Survival
  Creative
  Adventure
  Spectator
}

# Represents the data stored in a Minecraft world directory (i.e. a save game or backup)
type SaveGame {
  # The UUID of this world, generated by Minecraft when the world was generated
  ID: ID!
  # The path to this world file
  directory: String
  # The last time the world was saved
  lastPlayed: DateTime!
  # The version of the game that generated this save
  gameVersionID: String!
  # The difficulty level of the savegame
  difficulty: GameDifficulty!
  # Whether players may change the difficulty level in-game
  difficultyLocked: Boolean!
  # Which game mode to use by default; players have their own override values!
  gameMode: GameMode
  # Hardcore mode = permadeath
  hardcore: Boolean!
  # The number of ticks since the level started.
  time: Int64!
  # The time of day in ticks
  timeOfDay: Int!
  # The current weather (and forecast) in the savegame
  weather: Weather
  # GameRules
  rules: GameRules
  # Data about the world itself
  world: World!
  # Data about the players who have touched the world
  players: [PlayerSave]
}

type GameRules {
  announceAdvancements: Boolean
  commandBlockOutput: Boolean
  elytraMovementCheck: Boolean
  doDaylightCycle: Boolean
  doEntityDrops: Boolean
  doFireTick: Boolean
  doLimitedCrafting: Boolean
  doMobLoot: Boolean
  doMobSpawning: Boolean
  doTileDrops: Boolean
  doWeatherCycle: Boolean
  gameLoopFunction: String
  keepInventory: Boolean
  logAdminCommands: Boolean
  maxCommandChainLength: Int
  maxEntityCramming: Int
  mobGriefing: Boolean
  randomTickSpeed: Int
  reducedDebugInfo: Boolean
  sendCommandFeedback: Boolean
  showDeathMessages: Boolean
  spawnRadius: Int
  spectatorsGenerateChunks: Boolean
}

# The three weather states. Thundering implies also Raining
enum WeatherType {
  Clear
  Rain
  Thunder
}

# Represents the state of weather in a game
type Weather {
  # Whether it is currently raining
  raining: Boolean
  # Whether it is currently thundering
  thundering: Boolean
  # The current weather state
  type: WeatherType
  # Details on upcoming weather changes
  forecast: WeatherForecast
}

# Information on upcoming weather changes
type WeatherForecast {
  # How long until it next rains
  rainTime: Int
  # How long until the next thunderstorm
  thunderTime: Int
  # How long until the weather clears
  clearTime: Int
  # The next forecasted weather state
  nextType: WeatherType
  # How long until the weather changes
  changeTime: Int
}

# Represents data from world.dat
type World {
  # The random seed that generated this level
  seed: Int64!
  # The world generator settings used to generate this level
  generator: WorldGenerator!
  # Information on the world's borders
  border: WorldBorder!
  # The location that players will spawn. Note this is affected by the spawnRadius game rule
  spawn: Vector3D!
  # Represents dimensions in the world
  dimensions: [WorldDimension]
}

enum WorldDimensionType {
  Overworld
  Nether
  End
  Unknown
}

interface WorldDimension {
  ID: Int!
  type: WorldDimensionType
}

type GenericWorldDimension implements WorldDimension {
  ID: Int!
  type: WorldDimensionType
  villages: [Village]
  regions: [Region]
}

# Each region stores a set of chunks
type Region {
  coordinates: Vector2D
  chunks: [Chunk]
}

type Chunk {
  coordinates: Vector2D
  lastUpdated: Int64
  lightPopulated: Boolean
  terrainPopulated: Boolean
  timeInhabited: Int64
  biomes: [ChunkBiome]
  heightMap: [[Int]]
  sections: [ChunkSection]
  entities: [ChunkEntity]
  tileEntities: [ChunkTileEntity]
}

type ChunkBiome {
  name: String
}

type ChunkSection {
  yIndex: Int!
  blocks: [ChunkBlock]
}

type ChunkBlock {
  position: Vector2D
}

type ChunkEntity {
  entityName: String
}

type ChunkTileEntity {
  entityName: String
}

type Village {
  # Central point of the village
  centre: Vector3D!

  # Aggregate of the central point of all houses in the village
  centreOfMass: Vector3D!

  # Radius of the village, in blocks
  radius: Int!

  # The number of Iron Golems resident in the village
  golemCount: Int!

  # The number of villagers
  population: Int!

  # The time a house was last built
  lastHouseBuiltAt: Int64

  # All of the doors in the village
  doors: [VillageDoor]

  playerStandings: [PlayerVillageStanding]
}

type PlayerVillageStanding {
  name: String!
  karma: Int!
}

type VillageDoor {
  location: Vector3D
  direction: ViewAngle
}

# TODO: Gateways
type EndWorldDimension implements WorldDimension {
  ID: Int!
  type: WorldDimensionType
  dragon: EndDragonState
  exitPortal: Vector3D
  villages: [Village]
}

type EndDragonState {
  # The UUID of the dragon
  uuid: Int64
  # True if the dragon is currently alive
  alive: Boolean
  # True if the dragon has ever been killed
  killed: Boolean
}

# Represents a world's borders
type WorldBorder {
  # Size of the world's borders in blocks
  size: Int!
  # The location that the border is centered around
  center: Vector2D!
  sizeLerpTarget: Int!
  sizeLerpTime: Int64!
  safeZone: Int!
  warningBlocks: Int!
  warningTime: Int!
  damagePerBlock: Float!
}

# The different types of world generator. TODO: BOP/RTG/ATG
enum WorldGeneratorType {
  Default
  Flat
  LargeBiomes
  Amplified
  Customized
}

# Represents the settings used to generate a world
type WorldGenerator {
  # Which generator to use
  type: WorldGeneratorType!
  # The version number of the generator
  version: Int!
  # The options hash used to generate this world. Specific to the type of generator
  options: String
  # Whether structures (like villages, dungeons) are generated
  features: Boolean
}

type PlayerSave {
  # The player's Mojang profile UUID
  uuid: String!

  # TODO: Link off to minecraft-player data
  # player: Player!

  # The player's current game mode (overrides world game mode)
  gameMode: GameMode
  # The player's score (displayed upon death)
  score: Int

  # Details of the player's experience/level
  experience: PlayerExperience

  # Details of the player's hunger
  food: PlayerFoodState

  # The player's current inventory
  inventory: [InventorySlot]

  # The index in the player's inventory of the currently held item
  selectedInventorySlot: Int!

  # The player's ender chest inventory
  enderChestInventory: [InventorySlot]

  # A player's abilities
  abilities: PlayerAbilities

  # The player's spawn location (overrides world default)
  spawnLocation: Vector3D
  # Whether the player should spawn at `spawn` even if no bed can be found
  spawnForced: Boolean

  # The coordinates of the player's current location
  position: Vector3D
  # The player's current velocity
  velocity: Vector3D
  # The player's current view rotation
  rotation: ViewAngle
  # The ID of the dimension that the player is currently in
  dimensionID: Int!
  # The dimension that the player is currently in
  dimension: WorldDimension

  itemStatistics(action: PlayerAction): [PlayerItemStatistic]

  advancements(
    mod: String
    done: Boolean
    typePrefix: String
  ): [PlayerAdvancement]
}

type PlayerAdvancement {
  ID: ID!
  modID: String!
  type: String!
  criteria: [AdvancementCriteria]
  done: Boolean
}

type AdvancementCriteria {
  name: String!
  completedAt: DateTime!
}

type PlayerAbilities {
  walkSpeed: Float!
  flySpeed: Float!
  canFly: Boolean!
  flying: Boolean!
  invulnerable: Boolean!
  canBuild: Boolean!
  canDestroyBlocksInstantly: Boolean!
}

type InventorySlot {
  # The stack of items in the inventory slot
  item: ItemStack
  # The index of the slot in the inventory
  slot: Int!
}

type ItemStack {
  count: Int!
  damage: Int!
  itemID: ID!
  # TODO: item tag data
}

type PlayerExperience {
  # The total amount of experience gathered
  total: Int!
  # The player's current level, as per experience gathered
  level: Int!
  # The percentage progress through the current level
  progress: Float
}

type PlayerFoodState {
  # The level of the food bar (out of 20)
  level: Float!
  # The exhaustion level
  exhaustion: Float!
  # The saturation level
  saturation: Float!
}

enum PlayerAction {
  MineBlock
  CraftItem
  LeaveGame
  DropItem
  PickupItem
}

type PlayerItemStatistic {
  action: PlayerAction!
  itemID: String
  count: Int!
}

type Query {
  testSaveGame: SaveGame!
}
